// Code generated by goppy-cli for goppy.orm. DO NOT EDIT.
package entity

import (
	"context"

	"go.osspkg.com/goppy/v2/orm"
)

const sqlCreateCertDomain = `INSERT INTO "cert_domain" ("cert_id", "domain") VALUES ($1, $2)`

func (v *Repo) CreateBulkCertDomain(ctx context.Context, ms []*CertDomain, opts ...CreateOption) error {
	if len(ms) == 0 {
		return nil
	}
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateCertDomain)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(";")
	return v.Master().Tx(ctx, "cert_domain_create_bulk", func(tx orm.Tx) {
		for _, m := range ms {
			tx.Query(func(q orm.Querier) {
				q.SQL(buf.String(), m.SerialNumber, m.Domain)
			})
		}
	})
}
func (v *Repo) CreateCertDomain(ctx context.Context, m *CertDomain, opts ...CreateOption) error {
	buf := _sqlBuilderPool.Get()
	defer func() { _sqlBuilderPool.Put(buf) }()
	buf.WriteString(sqlCreateCertDomain)
	for _, o := range opts {
		o(buf)
	}
	buf.WriteString(";")
	return v.Master().Query(ctx, "cert_domain_create", func(q orm.Querier) {
		q.SQL(buf.String(), m.SerialNumber, m.Domain)
	})
}

const sqlSelectCertDomainBySerialNumber = `SELECT "cert_id", "domain" FROM "cert_domain" WHERE "cert_id"=ANY($1);`

func (v *Repo) SelectCertDomainBySerialNumber(ctx context.Context, args ...int64) ([]CertDomain, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]CertDomain, 0, len(args))
	err := v.Sync().Query(ctx, "cert_domain_read_by_cert_id", func(q orm.Querier) {
		q.SQL(sqlSelectCertDomainBySerialNumber, args)
		q.Bind(func(bind orm.Scanner) error {
			m := CertDomain{}
			if e := bind.Scan(&m.SerialNumber, &m.Domain); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlSelectCertDomainByDomain = `SELECT "cert_id", "domain" FROM "cert_domain" WHERE "domain"=ANY($1);`

func (v *Repo) SelectCertDomainByDomain(ctx context.Context, args ...string) ([]CertDomain, error) {
	if len(args) == 0 {
		return nil, nil
	}
	result := make([]CertDomain, 0, len(args))
	err := v.Sync().Query(ctx, "cert_domain_read_by_domain", func(q orm.Querier) {
		q.SQL(sqlSelectCertDomainByDomain, args)
		q.Bind(func(bind orm.Scanner) error {
			m := CertDomain{}
			if e := bind.Scan(&m.SerialNumber, &m.Domain); e != nil {
				return e
			}
			result = append(result, m)
			return nil
		})
	})
	if err != nil {
		return nil, err
	}
	return result, nil
}

const sqlUpdateCertDomainBySerialNumber = `UPDATE "cert_domain" SET "domain"=$1 WHERE "cert_id"=$2;`

func (v *Repo) UpdateCertDomainBySerialNumber(ctx context.Context, ms ...*CertDomain) error {
	if len(ms) == 0 {
		return nil
	}
	if len(ms) == 1 {
		return v.Master().Exec(ctx, "cert_domain_update_by_cert_id", func(e orm.Executor) {
			e.SQL(sqlUpdateCertDomainBySerialNumber, ms[0].Domain, ms[0].SerialNumber)
		})
	}
	return v.Master().Tx(ctx, "cert_domain_update_bulk_by_cert_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlUpdateCertDomainBySerialNumber)
			for _, m := range ms {
				e.Params(m.Domain, m.SerialNumber)
			}
		})
	})
}

const sqlUpdateCertDomainByDomain = `UPDATE "cert_domain" SET "cert_id"=$1 WHERE "domain"=$2;`

func (v *Repo) UpdateCertDomainByDomain(ctx context.Context, ms ...*CertDomain) error {
	if len(ms) == 0 {
		return nil
	}
	if len(ms) == 1 {
		return v.Master().Exec(ctx, "cert_domain_update_by_domain", func(e orm.Executor) {
			e.SQL(sqlUpdateCertDomainByDomain, ms[0].SerialNumber, ms[0].Domain)
		})
	}
	return v.Master().Tx(ctx, "cert_domain_update_bulk_by_domain", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlUpdateCertDomainByDomain)
			for _, m := range ms {
				e.Params(m.SerialNumber, m.Domain)
			}
		})
	})
}

const sqlDeleteCertDomainBySerialNumber = `DELETE FROM "cert_domain" WHERE "cert_id"=ANY($1);`

func (v *Repo) DeleteCertDomainBySerialNumber(ctx context.Context, ms ...int64) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "cert_domain_delete_by_cert_id", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteCertDomainBySerialNumber, ms)
		})
	})
}

const sqlDeleteCertDomainByDomain = `DELETE FROM "cert_domain" WHERE "domain"=ANY($1);`

func (v *Repo) DeleteCertDomainByDomain(ctx context.Context, ms ...string) error {
	if len(ms) == 0 {
		return nil
	}
	return v.Master().Tx(ctx, "cert_domain_delete_by_domain", func(tx orm.Tx) {
		tx.Exec(func(e orm.Executor) {
			e.SQL(sqlDeleteCertDomainByDomain, ms)
		})
	})
}
